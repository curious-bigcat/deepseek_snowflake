-- Step 1: Assign Account Admin Role and Grant Permissions
USE ROLE ACCOUNTADMIN;
GRANT BIND SERVICE ENDPOINT ON ACCOUNT TO ROLE DS_ROLE;

-- Step 2: Switch to DS_ROLE and Create Database
USE ROLE DS_ROLE;
CREATE DATABASE IF NOT EXISTS LLM;
USE DATABASE LLM;

-- Step 3: Create Compute Pool for GPU Resources
CREATE COMPUTE POOL GPU_NV_S
  MIN_NODES = 1
  MAX_NODES = 4
  INSTANCE_FAMILY = GPU_NV_S;

-- Step 4: Create Image Repository
CREATE OR REPLACE IMAGE REPOSITORY REPO_IMAGE;

-- Step 5: Create Stage for LLM Models
CREATE OR REPLACE STAGE MODELS
  DIRECTORY = (ENABLE = TRUE)
  ENCRYPTION = (TYPE='SNOWFLAKE_SSE');

-- Step 6: Create Stage for YAML Service Definitions
CREATE OR REPLACE STAGE SPECS
  DIRECTORY = (ENABLE = TRUE)
  ENCRYPTION = (TYPE='SNOWFLAKE_SSE');

-- Step 7: Create Network Rule for External Access
CREATE OR REPLACE NETWORK RULE HUGGING_FACE_NETWORK
  MODE = EGRESS
  TYPE = HOST_PORT
  VALUE_LIST = ('0.0.0.0');

-- Step 8: Switch Back to Account Admin Role and Create External Access Integration
USE ROLE ACCOUNTADMIN;
CREATE OR REPLACE EXTERNAL ACCESS INTEGRATION HUGGING_FACE_INTEGRATION
  ALLOWED_NETWORK_RULES = (HUGGING_FACE_NETWORK)
  ENABLED = TRUE;

-- Step 9: Grant Integration Usage to DS_ROLE
GRANT USAGE ON INTEGRATION HUGGING_FACE_INTEGRATION TO ROLE DS_ROLE;

-- Step 10: Switch Back to DS_ROLE and Verify Image Repositories
USE ROLE DS_ROLE;
SHOW IMAGE REPOSITORIES;

-- Step 11: Create Service Using Specifications
CREATE SERVICE DEEPSEEK
  IN COMPUTE POOL DS_POOL
  FROM @SPECS SPEC='spec.yml'
  EXTERNAL_ACCESS_INTEGRATIONS = (HUGGING_FACE_INTEGRATION);

-- Step 12: Verify Service Creation and Status
SHOW SERVICES;
CALL SYSTEM$GET_SERVICE_STATUS('DEEPSEEK');
CALL SYSTEM$GET_SERVICE_LOGS('DEEPSEEK', '0', 'deepseek', '1000');

-- Step 13: Describe Compute Pool Details
DESCRIBE COMPUTE POOL DS_POOL;

-- Step 14: Display Service Endpoints and Containers
SHOW SERVICES;
SHOW ENDPOINTS IN SERVICE DEEPSEEK;
SHOW SERVICE CONTAINERS IN SERVICE DEEPSEEK;
